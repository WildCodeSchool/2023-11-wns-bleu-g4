services:
  db:
    stop_grace_period: 0s
    image: postgres:15-alpine
    environment:
      POSTGRES_PASSWORD: ${DB_PASS:-postgres}
      PGUSER: ${DB_USER:-postgres}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - devDB:/var/lib/postgresql/data

  backend:
    stop_grace_period: 0s
    environment:
      DB_HOST: db
      DB_USER: ${DB_USER:-postgres}
      DB_PASS: ${DB_PASS:-postgres}
      DB_NAME: ${DB_NAME:-postgres}
      JWT_PRIVATE_KEY: ${JWT_PRIVATE_KEY:-changeme}
      NODE_ENV: ${NODE_ENV:-development}
      FRONTEND_URL: ${FRONTEND_URL:-localhost:3000}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-localhost:3000}
      SMTP_HOST: ${SMTP_HOST:-smtp}
      SMTP_PORT: ${SMTP_PORT:-400}
      SMTP_USER: ${SMTP_USER:-yourId}
      SMTP_PASS: ${SMTP_PASS:-yourPassword}
      EMAIL_FROM: ${EMAIL_FROM:-yourEmail}
      DB_PORT: ${DB_PORT:-5432}
      SERVER_PORT: ${SERVER_PORT:-4000}
    depends_on:
      db:
        condition: service_healthy
    image: chambrin80/gear-go-server-dev


  frontend:
    stop_grace_period: 0s
    environment:
      JWT_PRIVATE_KEY: ${JWT_PRIVATE_KEY:-changeme}
      NEXT_PUBLIC_GRAPHQL_API_URL: ${NEXT_PUBLIC_GRAPHQL_API_URL}
      NEXT_PUBLIC_UPLOAD_API_ENDPOINT: ${NEXT_PUBLIC_UPLOAD_API_ENDPOINT}
    image: chambrin80/gear-go-client-dev


  upload-service:
    environment:
      - HOST=/
    stop_grace_period: 0s
    # image: scrip/file-upload-service
    volumes:
      - devUploads:/app/files
    build:
      context: upload
      dockerfile: Dockerfile

  gateway:
    restart: always
    stop_grace_period: 0s
    build:
      context: gateway
      dockerfile: Dockerfile.production
    ports:
      - ${GATEWAY_PORT:-80}:80

  volumes:
    devDB:
    devUploads:
