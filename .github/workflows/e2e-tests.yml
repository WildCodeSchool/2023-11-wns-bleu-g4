name: e2e-tests

on:
  pull_request:
  workflow_call:

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./e2e-tests
    steps:
      - uses: actions/checkout@v4

      # Docker layer caching
      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install Dependencies
        run: npm ci
      - name: Install backend dependencies
        run: cd ../backend && npm ci

        # Create .env file using secrets
      - name: Create .env from Secrets
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> ../backend/.env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> ../backend/.env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> ../backend/.env
          echo "DB_USER=${{ secrets.DB_USER }}" >> ../backend/.env
          echo "DB_PASS=${{ secrets.DB_PASS }}" >> ../backend/.env
          echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> ../backend/.env
          echo "JWT_PRIVATE_KEY=${{ secrets.JWT_PRIVATE_KEY }}" >> ../backend/.env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> ../backend/.env
          echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> ../backend/.env
          echo "CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}" >> ../backend/.env
          echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> ../backend/.env
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> ../backend/.env
          echo "SMTP_USER=${{ secrets.SMTP_USER }}" >> ../backend/.env
          echo "SMTP_PASS=${{ secrets.SMTP_PASS }}" >> ../backend/.env
          echo "EMAIL_FROM=${{ secrets.EMAIL_FROM }}" >> ../backend/.env

      # Store Playwright's Version
      - name: Store Playwright's Version
        run: |
          PLAYWRIGHT_VERSION=$(npm ls @playwright/test | grep @playwright | sed 's/.*@//')
          echo "Playwright's Version: $PLAYWRIGHT_VERSION"
          echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV

      # Cache Playwright Browsers for Playwright's Version
      - name: Cache Playwright Browsers
        id: cache-playwright-browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ env.PLAYWRIGHT_VERSION }}

        # Setup Playwright if not cached
      - name: Setup Playwright
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      # Start your application using the .env file
      - name: Start app
        run: |
          npm run app:start &
          sleep 10 # Wait for the application to start;

        # Run Playwright tests
      - name: Run Playwright tests
        run: npm run test

      # Store Artifacts from Failed Tests
      - name: Store Artifacts from Failed Tests
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: e2e-tests/test-results/
          retention-days: 7
